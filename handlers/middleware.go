// handlers/middleware.go
package handlers

import (
	"fmt"
	"go-api-game/auth"
	"go-api-game/utils"
	"net/http"
	"strconv"
	"strings"
)

// AuthMiddleware verifies user authentication using JWT
// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ JWT
func AuthMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// ‡∏î‡∏∂‡∏á Authorization header ‡∏à‡∏≤‡∏Å request
		authHeader := r.Header.Get("Authorization")
		if authHeader == "" {
			utils.JSONError(w, "Authorization header required", http.StatusUnauthorized)
			return
		}

		// ‡πÅ‡∏¢‡∏Å token ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "Bearer <token>"
		parts := strings.Split(authHeader, " ")
		if len(parts) != 2 || parts[0] != "Bearer" {
			utils.JSONError(w, "Invalid authorization format", http.StatusUnauthorized)
			return
		}

		tokenString := parts[1]
		fmt.Printf("üîê Token received: %s...\n", tokenString[:20])

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á JWT token
		claims, err := auth.ValidateToken(tokenString)
		if err != nil {
			fmt.Printf("‚ùå Token validation failed: %v\n", err)
			utils.JSONError(w, "Invalid token: "+err.Error(), http.StatusUnauthorized)
			return
		}

		fmt.Printf("‚úÖ Token valid: UserID=%d, Username=%s, Role=%s\n",
			claims.UserID, claims.Username, claims.Role)

		// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÉ‡∏ô headers ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ handler ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
		r.Header.Set("User-ID", strconv.Itoa(claims.UserID))
		r.Header.Set("Username", claims.Username)
		r.Header.Set("Role", claims.Role)

		// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handler ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏ô chain
		next.ServeHTTP(w, r)
	})
}

// AdminOnly middleware restricts access to admin users
// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô admin
func AdminOnly(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// ‡∏î‡∏∂‡∏á Role ‡∏à‡∏≤‡∏Å header (‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢ AuthMiddleware)
		role := r.Header.Get("Role")
		if role != "admin" {
			utils.JSONError(w, "Admin access required", http.StatusForbidden)
			return
		}

		// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handler ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏ô chain (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ admin)
		next.ServeHTTP(w, r)
	})
}
