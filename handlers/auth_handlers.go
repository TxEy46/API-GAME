package handlers

import (
	"bytes"
	"database/sql"
	"encoding/json"
	"fmt"
	"go-api-game/auth"
	"go-api-game/utils"
	"io"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"golang.org/x/crypto/bcrypt"
)

// RegisterHandler handles user registration
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
func RegisterHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Printf("üîç Register Handler - Method: %s, Content-Type: %s\n", r.Method, r.Header.Get("Content-Type"))

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ò‡∏≠‡∏î POST ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if r.Method != "POST" {
		utils.JSONError(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å request
	var req struct {
		Username string `json:"username"`
		Email    string `json:"email"`
		Password string `json:"password"`
	}
	var avatarURL string // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û avatar

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
	contentType := r.Header.Get("Content-Type")

	// ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Form-data (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå avatar)
	if strings.Contains(contentType, "multipart/form-data") {
		fmt.Printf("üìù Processing as multipart/form-data\n")

		// ‡πÅ‡∏¢‡∏Å‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå form data ‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10MB
		err := r.ParseMultipartForm(10 << 20) // 10 MB limit
		if err != nil {
			utils.JSONError(w, "Error parsing form data", http.StatusBadRequest)
			return
		}

		// ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
		req.Username = r.FormValue("username")
		req.Email = r.FormValue("email")
		req.Password = r.FormValue("password")

		// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå avatar
		file, header, err := r.FormFile("avatar")
		if err == nil {
			defer file.Close()

			// ‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å - ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå
			// ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ

			// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
			ext := strings.ToLower(filepath.Ext(header.Filename))
			if ext == "" {
				// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ .dat ‡πÄ‡∏õ‡πá‡∏ô default
				ext = ".dat"
			}
			filename := fmt.Sprintf("avatar_%d%s", time.Now().UnixNano(), ext)
			filePath := filepath.Join("uploads", filename)

			// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
			dst, err := os.Create(filePath)
			if err != nil {
				utils.JSONError(w, "Error saving avatar", http.StatusInternalServerError)
				return
			}
			defer dst.Close()

			// ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
			if _, err := io.Copy(dst, file); err != nil {
				utils.JSONError(w, "Error copying avatar", http.StatusInternalServerError)
				return
			}

			avatarURL = "/uploads/" + filename
			fmt.Printf("‚úÖ Avatar uploaded: %s\n", avatarURL)
		} else {
			// ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå avatar ‡∏™‡πà‡∏á‡∏°‡∏≤ ‚Üí ‡πÉ‡∏ä‡πâ default avatar
			avatarURL = "/uploads/default-avatar.png"
			fmt.Printf("üìù No avatar uploaded, using default: %s\n", avatarURL)
		}

		fmt.Printf("üîç Form data - Username: %s, Email: %s, Password: %s, Avatar: %s\n",
			req.Username, req.Email, "***", avatarURL)

	} else if strings.Contains(contentType, "application/json") {
		// ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö JSON
		fmt.Printf("üìù Processing as JSON\n")

		// ‡∏≠‡πà‡∏≤‡∏ô body ‡∏Ç‡∏≠‡∏á request
		body, err := io.ReadAll(r.Body)
		if err != nil {
			fmt.Printf("‚ùå Error reading body: %v\n", err)
			utils.JSONError(w, "Error reading request body", http.StatusBadRequest)
			return
		}

		fmt.Printf("üîç Raw request body: %s\n", string(body))
		// ‡∏™‡∏£‡πâ‡∏≤‡∏áÊñ∞ÁöÑ reader ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON decoder
		r.Body = io.NopCloser(bytes.NewBuffer(body))

		// ‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÄ‡∏õ‡πá‡∏ô struct
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			fmt.Printf("‚ùå JSON decode error: %v\n", err)
			utils.JSONError(w, "Invalid JSON format: "+err.Error(), http.StatusBadRequest)
			return
		}

		// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JSON request ‚Üí ‡πÉ‡∏ä‡πâ default avatar
		avatarURL = "/uploads/default-avatar.png"
		fmt.Printf("üîç JSON data - Username: %s, Email: %s, Password: %s, Avatar: %s\n",
			req.Username, req.Email, "***", avatarURL)
	} else {
		utils.JSONError(w, "Content-Type must be application/json or multipart/form-data", http.StatusBadRequest)
		return
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
	if req.Username == "" || req.Email == "" || req.Password == "" {
		utils.JSONError(w, "Username, email and password are required", http.StatusBadRequest)
		return
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
	if !isValidEmail(req.Email) {
		utils.JSONError(w, "Invalid email format", http.StatusBadRequest)
		return
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
	if len(req.Password) < 6 {
		utils.JSONError(w, "Password must be at least 6 characters", http.StatusBadRequest)
		return
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	var count int
	err := db.QueryRow(`
        SELECT COUNT(*) 
        FROM users 
        WHERE username = ? OR email = ?
    `, req.Username, req.Email).Scan(&count)

	if err != nil {
		utils.JSONError(w, "Error checking user existence", http.StatusInternalServerError)
		return
	}

	if count > 0 {
		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏î‡∏ã‡πâ‡∏≥
		var existingUsername, existingEmail string
		db.QueryRow(`
            SELECT username, email 
            FROM users 
            WHERE username = ? OR email = ?
            LIMIT 1
        `, req.Username, req.Email).Scan(&existingUsername, &existingEmail)

		if existingUsername == req.Username {
			utils.JSONError(w, "Username already exists", http.StatusBadRequest)
			return
		}
		if existingEmail == req.Email {
			utils.JSONError(w, "Email already exists", http.StatusBadRequest)
			return
		}
	}

	// Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	if err != nil {
		utils.JSONError(w, "Error processing password", http.StatusInternalServerError)
		return
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏° avatar_url
	result, err := db.Exec(`
        INSERT INTO users (username, email, password_hash, role, avatar_url) 
        VALUES (?, ?, ?, 'user', ?)
    `, req.Username, req.Email, string(hashedPassword), avatarURL)

	if err != nil {
		// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ‡∏ñ‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà)
		if avatarURL != "" && avatarURL != "/uploads/default-avatar.png" {
			os.Remove(strings.TrimPrefix(avatarURL, "/"))
		}
		utils.JSONError(w, "Error creating user: "+err.Error(), http.StatusInternalServerError)
		return
	}

	// ‡∏î‡∏∂‡∏á ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
	userID, _ := result.LastInsertId()

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
	_, err = db.Exec("INSERT INTO carts (user_id) VALUES (?)", userID)
	if err != nil {
		// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ‡∏ñ‡πâ‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà)
		if avatarURL != "" && avatarURL != "/uploads/default-avatar.png" {
			os.Remove(strings.TrimPrefix(avatarURL, "/"))
		}
		utils.JSONError(w, "Error creating cart", http.StatusInternalServerError)
		return
	}

	fmt.Printf("‚úÖ User registered successfully: ID=%d, Username=%s, Avatar: %s\n",
		userID, req.Username, avatarURL)

	// ‡∏™‡πà‡∏á response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏° avatar_url
	response := map[string]interface{}{
		"message":    "User registered successfully",
		"user_id":    userID,
		"username":   req.Username,
		"email":      req.Email,
		"avatar_url": avatarURL, // ‡∏™‡πà‡∏á avatar_url ‡∏ï‡∏•‡∏≠‡∏î
	}

	utils.JSONResponse(w, response, http.StatusCreated)
}

// LoginHandler handles user login with identifier (username or email)
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•
func LoginHandler(w http.ResponseWriter, r *http.Request) {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ò‡∏≠‡∏î POST ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if r.Method != "POST" {
		utils.JSONError(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
	var req struct {
		Identifier string `json:"identifier"` // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•
		Password   string `json:"password"`   // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
	}

	// ‡πÅ‡∏õ‡∏•‡∏á JSON request body ‡πÄ‡∏õ‡πá‡∏ô struct
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		utils.JSONError(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	fmt.Printf("üîç Login attempt: identifier='%s'\n", req.Identifier)

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
	if req.Identifier == "" || req.Password == "" {
		utils.JSONError(w, "Identifier and password are required", http.StatusBadRequest)
		return
	}

	// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	var userID int
	var username, email, passwordHash, role string

	// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•
	err := db.QueryRow(`
		SELECT id, username, email, password_hash, role 
		FROM users 
		WHERE username = ? OR email = ?
	`, req.Identifier, req.Identifier).Scan(
		&userID, &username, &email, &passwordHash, &role,
	)

	if err != nil {
		fmt.Printf("‚ùå Database error: %v\n", err)
		if err == sql.ErrNoRows {
			utils.JSONError(w, "Invalid identifier or password", http.StatusUnauthorized)
		} else {
			utils.JSONError(w, "Error during login: "+err.Error(), http.StatusInternalServerError)
		}
		return
	}

	fmt.Printf("‚úÖ User found: ID=%d, Username=%s, Email=%s, Role=%s\n", userID, username, email, role)
	fmt.Printf("üîë Password hash: %s...\n", passwordHash[:20])

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
	err = bcrypt.CompareHashAndPassword([]byte(passwordHash), []byte(req.Password))
	if err != nil {
		fmt.Printf("‚ùå Password mismatch: %v\n", err)
		utils.JSONError(w, "Invalid identifier or password", http.StatusUnauthorized)
		return
	}

	fmt.Printf("‚úÖ Password correct!\n")

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT token
	token, err := auth.GenerateToken(userID, username, email, role)
	if err != nil {
		utils.JSONError(w, "Error generating token", http.StatusInternalServerError)
		return
	}

	fmt.Printf("üéâ Login successful for user: %s, role: %s\n", username, role)

	// ‡∏™‡πà‡∏á response ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	utils.JSONResponse(w, map[string]interface{}{
		"message":  "Login successful",
		"user_id":  userID,
		"username": username,
		"email":    email,
		"role":     role,
		"token":    token,
	}, http.StatusOK)
}

// ProfileHandler handles user profile
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
func ProfileHandler(w http.ResponseWriter, r *http.Request) {
	// ‡∏î‡∏∂‡∏á User-ID ‡∏à‡∏≤‡∏Å header (‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢ middleware ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô)
	userIDStr := r.Header.Get("User-ID")

	fmt.Printf("üîç Profile request - User-ID header: '%s'\n", userIDStr)

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ User-ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if userIDStr == "" {
		utils.JSONError(w, "User ID not found in headers", http.StatusUnauthorized)
		return
	}

	// ‡πÅ‡∏õ‡∏•‡∏á User-ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
	userID, err := strconv.Atoi(userIDStr)
	if err != nil {
		fmt.Printf("‚ùå Invalid User-ID format: %s\n", userIDStr)
		utils.JSONError(w, "Invalid user ID format", http.StatusBadRequest)
		return
	}

	fmt.Printf("üîç Querying database for user ID: %d\n", userID)

	// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
	var id int
	var username, email string
	var avatarURL sql.NullString // ‡πÉ‡∏ä‡πâ NullString ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ avatar_url ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô NULL
	var walletBalance float64

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	err = db.QueryRow(`
		SELECT id, username, email, avatar_url, wallet_balance 
		FROM users 
		WHERE id = ?
	`, userID).Scan(&id, &username, &email, &avatarURL, &walletBalance)

	if err != nil {
		fmt.Printf("‚ùå Database error in ProfileHandler: %v\n", err)
		fmt.Printf("‚ùå SQL Error details: %v\n", err)

		if err == sql.ErrNoRows {
			utils.JSONError(w, "User not found in database", http.StatusNotFound)
		} else {
			utils.JSONError(w, "Database error: "+err.Error(), http.StatusInternalServerError)
		}
		return
	}

	fmt.Printf("‚úÖ Database result - ID: %d, Username: %s, Email: %s, Balance: %.2f\n",
		id, username, email, walletBalance)

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á response object
	profile := map[string]interface{}{
		"id":             id,
		"username":       username,
		"email":          email,
		"wallet_balance": walletBalance,
		"avatar_url":     "", // ‡∏Ñ‡πà‡∏≤ default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ avatar
	}

	// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ avatar_url ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
	if avatarURL.Valid {
		profile["avatar_url"] = avatarURL.String
	}

	fmt.Printf("üéâ Sending profile response\n")
	utils.JSONResponse(w, profile, http.StatusOK)
}

// UpdateProfileHandler updates user profile (including avatar and password change)
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô avatar ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
func UpdateProfileHandler(w http.ResponseWriter, r *http.Request) {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ò‡∏≠‡∏î PUT ‡∏´‡∏£‡∏∑‡∏≠ PATCH
	if r.Method != "PUT" && r.Method != "PATCH" {
		utils.JSONError(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// ‡∏î‡∏∂‡∏á User-ID ‡∏à‡∏≤‡∏Å header
	userID := r.Header.Get("User-ID")

	fmt.Printf("üîç Update profile request for user ID: %s\n", userID)

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ User-ID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if userID == "" {
		utils.JSONError(w, "User ID not found", http.StatusUnauthorized)
		return
	}

	// ‡πÅ‡∏õ‡∏•‡∏á User-ID ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
	userIDInt, err := strconv.Atoi(userID)
	if err != nil {
		utils.JSONError(w, "Invalid user ID", http.StatusBadRequest)
		return
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Content-Type
	contentType := r.Header.Get("Content-Type")
	var req struct {
		Username        string `json:"username"`
		Email           string `json:"email"`
		CurrentPassword string `json:"current_password"` // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
		NewPassword     string `json:"new_password"`     // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
		ConfirmPassword string `json:"confirm_password"` // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
	}
	var avatarURL string

	// ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Form-data (‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå avatar)
	if strings.Contains(contentType, "multipart/form-data") {
		err = r.ParseMultipartForm(10 << 20) // 10 MB limit
		if err != nil {
			utils.JSONError(w, "Error parsing form data", http.StatusBadRequest)
			return
		}

		// ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
		req.Username = r.FormValue("username")
		req.Email = r.FormValue("email")
		req.CurrentPassword = r.FormValue("current_password")
		req.NewPassword = r.FormValue("new_password")
		req.ConfirmPassword = r.FormValue("confirm_password")

		// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå avatar
		file, header, err := r.FormFile("avatar")
		if err == nil {
			defer file.Close()

			// ‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≠‡∏Å - ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå
			// ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ

			// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô (‡∏£‡∏ß‡∏° userID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
			ext := strings.ToLower(filepath.Ext(header.Filename))
			if ext == "" {
				// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ .dat ‡πÄ‡∏õ‡πá‡∏ô default
				ext = ".dat"
			}
			filename := fmt.Sprintf("avatar_%d_%d%s", userIDInt, time.Now().UnixNano(), ext)
			filePath := filepath.Join("uploads", filename)

			// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
			dst, err := os.Create(filePath)
			if err != nil {
				utils.JSONError(w, "Error saving avatar", http.StatusInternalServerError)
				return
			}
			defer dst.Close()

			if _, err := io.Copy(dst, file); err != nil {
				utils.JSONError(w, "Error copying avatar", http.StatusInternalServerError)
				return
			}

			avatarURL = "/uploads/" + filename
			fmt.Printf("‚úÖ Avatar uploaded: %s\n", avatarURL)
		}
	} else {
		// ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö JSON (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå avatar)
		if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
			utils.JSONError(w, "Invalid request body", http.StatusBadRequest)
			return
		}
	}

	// Validate input - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ field ‡πÉ‡∏î‡πÜ ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if req.Username == "" && req.Email == "" && avatarURL == "" && req.NewPassword == "" {
		utils.JSONError(w, "No fields to update", http.StatusBadRequest)
		return
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≤
	if req.Email != "" && !isValidEmail(req.Email) {
		utils.JSONError(w, "Invalid email format", http.StatusBadRequest)
		return
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤
	if req.NewPassword != "" {
		if req.CurrentPassword == "" {
			utils.JSONError(w, "Current password is required to change password", http.StatusBadRequest)
			return
		}

		if req.ConfirmPassword == "" {
			utils.JSONError(w, "Confirm password is required", http.StatusBadRequest)
			return
		}

		if req.NewPassword != req.ConfirmPassword {
			utils.JSONError(w, "New password and confirm password do not match", http.StatusBadRequest)
			return
		}

		if len(req.NewPassword) < 6 {
			utils.JSONError(w, "New password must be at least 6 characters", http.StatusBadRequest)
			return
		}

		if req.CurrentPassword == req.NewPassword {
			utils.JSONError(w, "New password must be different from current password", http.StatusBadRequest)
			return
		}
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏´‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≤)
	if req.Username != "" || req.Email != "" {
		var existingUser string
		checkQuery := `
			SELECT 
				CASE 
					WHEN username = ? AND id != ? THEN 'username'
					WHEN email = ? AND id != ? THEN 'email'
				END as existing_field
			FROM users 
			WHERE (username = ? OR email = ?) AND id != ?
		`
		err := db.QueryRow(checkQuery, req.Username, userIDInt, req.Email, userIDInt, req.Username, req.Email, userIDInt).Scan(&existingUser)

		if err == nil && existingUser != "" {
			utils.JSONError(w, fmt.Sprintf("%s already exists", existingUser), http.StatusBadRequest)
			return
		} else if err != nil && err != sql.ErrNoRows {
			utils.JSONError(w, "Error checking user existence", http.StatusInternalServerError)
			return
		}
	}

	// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
	var newPasswordHash string
	if req.NewPassword != "" {
		// ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
		var currentPasswordHash string
		err = db.QueryRow("SELECT password_hash FROM users WHERE id = ?", userIDInt).Scan(&currentPasswordHash)
		if err != nil {
			if err == sql.ErrNoRows {
				utils.JSONError(w, "User not found", http.StatusNotFound)
			} else {
				utils.JSONError(w, "Error fetching user data", http.StatusInternalServerError)
			}
			return
		}

		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
		err = bcrypt.CompareHashAndPassword([]byte(currentPasswordHash), []byte(req.CurrentPassword))
		if err != nil {
			fmt.Printf("‚ùå Current password mismatch for user ID: %d\n", userIDInt)
			utils.JSONError(w, "Current password is incorrect", http.StatusUnauthorized)
			return
		}

		// Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
		hashedBytes, err := bcrypt.GenerateFromPassword([]byte(req.NewPassword), bcrypt.DefaultCost)
		if err != nil {
			utils.JSONError(w, "Error processing new password", http.StatusInternalServerError)
			return
		}
		newPasswordHash = string(hashedBytes)
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å‡∏ï‡∏≤‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≤
	updateFields := []string{} // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
	args := []interface{}{}    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô query ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤
	if req.Username != "" {
		updateFields = append(updateFields, "username = ?")
		args = append(args, req.Username)
	}

	if req.Email != "" {
		updateFields = append(updateFields, "email = ?")
		args = append(args, req.Email)
	}

	if avatarURL != "" {
		updateFields = append(updateFields, "avatar_url = ?")
		args = append(args, avatarURL)
	}

	if newPasswordHash != "" {
		updateFields = append(updateFields, "password_hash = ?")
		args = append(args, newPasswordHash)
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if len(updateFields) == 0 {
		utils.JSONError(w, "No fields to update", http.StatusBadRequest)
		return
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° user ID ‡πÑ‡∏õ‡∏¢‡∏±‡∏á args ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç WHERE
	args = append(args, userIDInt)

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞ execute ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á UPDATE
	query := fmt.Sprintf("UPDATE users SET %s WHERE id = ?", strings.Join(updateFields, ", "))
	result, err := db.Exec(query, args...)
	if err != nil {
		fmt.Printf("‚ùå Error updating profile: %v\n", err)
		// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ‡∏ñ‡πâ‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		if avatarURL != "" {
			os.Remove(strings.TrimPrefix(avatarURL, "/"))
		}
		utils.JSONError(w, "Error updating profile: "+err.Error(), http.StatusInternalServerError)
		return
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	rowsAffected, _ := result.RowsAffected()
	if rowsAffected == 0 {
		// ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
		if avatarURL != "" {
			os.Remove(strings.TrimPrefix(avatarURL, "/"))
		}
		utils.JSONError(w, "User not found or no changes made", http.StatusNotFound)
		return
	}

	fmt.Printf("‚úÖ Profile updated successfully for user ID: %d\n", userIDInt)

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
	var updatedUser struct {
		ID       int     `json:"id"`
		Username string  `json:"username"`
		Email    string  `json:"email"`
		Avatar   string  `json:"avatar_url"`
		Balance  float64 `json:"wallet_balance"`
	}
	var avatarDB sql.NullString

	err = db.QueryRow(`
		SELECT id, username, email, avatar_url, wallet_balance 
		FROM users 
		WHERE id = ?
	`, userIDInt).Scan(&updatedUser.ID, &updatedUser.Username, &updatedUser.Email, &avatarDB, &updatedUser.Balance)

	if err != nil {
		utils.JSONError(w, "Error fetching updated profile", http.StatusInternalServerError)
		return
	}

	// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ avatar URL
	if avatarDB.Valid {
		updatedUser.Avatar = avatarDB.String
	} else {
		updatedUser.Avatar = ""
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á response
	response := map[string]interface{}{
		"message": "Profile updated successfully",
		"user":    updatedUser,
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
	if newPasswordHash != "" {
		response["password_changed"] = true
	}

	utils.JSONResponse(w, response, http.StatusOK)
}

// isValidEmail checks if email format is valid
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
func isValidEmail(email string) bool {
	// ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢
	if len(email) < 3 || len(email) > 254 {
		return false
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ @ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	at := strings.Index(email, "@")
	if at == -1 || at == 0 || at == len(email)-1 {
		return false
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ . ‡∏´‡∏•‡∏±‡∏á @ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	dot := strings.LastIndex(email[at:], ".")
	if dot == -1 || dot == 0 || dot == len(email[at:])-1 {
		return false
	}

	return true
}
